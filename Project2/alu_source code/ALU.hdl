/**
 * 16-bit Hack ALU from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * The ALU computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * 
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 * 
 * Implementation: the ALU logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
 * 
 * Author: Naga Kandasamy
 * Date created: July 10, 2020
 * Date modified: October 11, 2023
 * 
 * Name of student: Khoa Nguyen
 * Date modified: 10/20/2023
*/

CHIP ALU {
    IN  
        x[16], y[16],       // 16-bit inputs        
        zx,                 // zero the x input?
        nx,                 // negate the x input?
        zy,                 // zero the y input?
        ny,                 // negate the y input?
        f,                  // compute out = x + y (if 1) or x & y (if 0)
        no;                 // negate the out output?

    OUT 
        out[16],            // 16-bit output
        zr,                 // 1 if (out == 0), 0 otherwise
        ng;                 // 1 if (out < 0),  0 otherwise

    PARTS:
    // TODO: complete the implementation of the ALU
        Mux16(a=x,b[0..15]=false,sel=zx,out=xp1); //Zero the x
        Mux16(a=y,b[0..15]=false,sel=zy,out=yp1); //Zero the y

        Not16(in=xp1, out=nxp1);  //Bit-wise Not the x
        Not16(in=yp1, out=nyp1);  //Bit-wise Not the y

        Mux16(a=xp1,b=nxp1,sel=nx,out=xp2); //Zero the x_p1
        Mux16(a=yp1,b=nyp1,sel=ny,out=yp2); //Zero the y_p1

        And16(a=xp2, b=yp2, out=xygn);  //product of x and y
        Add16(a=xp2, b=yp2, out=xypg); //Propogate of x and y

        Mux16(a=xygn, b=xypg, sel=f, out= preout);     // pre ALU output

        Not16(in=preout, out=notpreout);

        Mux16(a=preout, b=notpreout, sel=no, out=fout);    //post set ALU output\

        Or16Way(in=fout,out=notout);  //for zr
        Not(in=notout,out=zr);

        And16(a[0..15]=true,b=fout,out[15]=ng,out[0..14]=drop); //ng
        Or16(a=fout,b[0..15]=false,out=out); //
}