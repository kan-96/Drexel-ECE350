/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * 
 * Author: Naga Kandasamy
 * Date created: July 12, 2020

 * Student name(s): Khoa Nguyen
 * Date modified: 10/20/2023
 *
 * Notes: Hardware project from the book "The Elements of Computing Systems" by Nisan and Schocken, MIT Press.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    /* Implementation tip: A larger RAM unit can be built by grouping smaller RAM-parts together.
       Think about the RAMâ€™s address input as consisting of two fields: 
       one field can be used to select a RAM-part;
       the other field can be used to select a register within that RAM-part
       Use mux/demux logic to effect this addressing scheme.
*/
    PARTS:
    // TODO: complete your implementation of RAM64.
        DMux8Way(in=load, sel=address[0..2], a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7);
        RAM8(in=in, load=r0, address=address[3..5], out=r0Out);
        RAM8(in=in, load=r1, address=address[3..5], out=r1Out);
        RAM8(in=in, load=r2, address=address[3..5], out=r2Out);
        RAM8(in=in, load=r3, address=address[3..5], out=r3Out);
        RAM8(in=in, load=r4, address=address[3..5], out=r4Out);
        RAM8(in=in, load=r5, address=address[3..5], out=r5Out);
        RAM8(in=in, load=r6, address=address[3..5], out=r6Out);
        RAM8(in=in, load=r7, address=address[3..5], out=r7Out);
        Mux8Way16(a=r0Out, b=r1Out, c=r2Out, d=r3Out, e=r4Out, f=r5Out, g=r6Out, h=r7Out, sel=address[0..2], out=out);

}